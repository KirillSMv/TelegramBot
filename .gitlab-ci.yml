stages:
  - build
  - kaniko-build
  - deploy

variables:
  DOCKER_REGISTRY: "git.codenrock.com:5050"
  IMAGE_PATH: "neo-hack-2025-1364/cnrprod1737640815-team-83210/razrabotka-telegram-bota-dlya-avtomatizacii-processa-sbora-zayavok-na-obuchenie-6462"
  IMAGE_TAG: "${CI_REGISTRY_IMAGE}:latest"
  KUBECONFIG: "/builds/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/.kube/config"
  KUBECONFIG_CONTEXT: "cnrprod1737640815-team-83210"

build-telegram-bot-service1:
  stage: build
  image: maven:3.9.4-eclipse-temurin-21
  tags:
    - runner
    - build
    - k8s
  only:
    - develop
  script:
    - cd develop/backend/data-storage
    - mvn clean package
    - ls -la target
  artifacts:
    paths:
      - develop/backend/data-storage/target/*.jar
    expire_in: 1 week

build-telegram-bot-service:
  stage: kaniko-build
  image:
    name: gcr.io/kaniko-project/executor:v1.19.0-debug
    entrypoint: [""]  # Чтобы можно было использовать канико
  tags:
    - runner
    - build
    - k8s
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/develop/backend/data-storage/Dockerfile" --destination "${DOCKER_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:latest"
  artifacts:
    paths:
      - develop/backend/data-storage/target/*.jar 
    expire_in: 1 week

deploy-telegram-bot-service:
  stage: deploy
  image: bitnami/kubectl:latest
  tags:
    - runner
    - build
    - k8s
  only:
    - develop
  script:
    - echo "$KUBECONFIG_CONTENT" > kubeconfig  # Сохранение kubeconfig
    - echo "KUBECONFIG file saved at:"; pwd; echo "/kubeconfig"
    - cat kubeconfig
    - export KUBECONFIG=$(pwd)/kubeconfig  # Используем kubeconfig для kubectl
    - kubectl config use-context $KUBECONFIG_CONTEXT  # Используем ваш контекст
    - kubectl apply -f devops/k8s/telegram-bot-service-deployment.yaml --namespace=cnrprod1737640815-team-83210

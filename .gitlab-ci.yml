stages:
  - build
  - kaniko-build
  - deploy

variables:
  DOCKER_REGISTRY: "git.codenrock.com:5050"
  IMAGE_PATH: "neo-hack-2025-1364/cnrprod1737640949-team-83206/razrabotka-telegram-bota-dlya-avtomatizacii-processa-sbora-zayavok-na-obuchenie-6462"
  IMAGE_TAG: "${CI_REGISTRY_IMAGE}:latest"
  KUBECONFIG: "/builds/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/.kube/config"  # Указание пути к kubeconfig
  KUBECONFIG_CONTEXT: "cnrprod1737640949-team-83206"
  KUBERNETES_NAMESPACE: "cnrprod1737640949-team-83206"

build-telegram-bot-service1:
  stage: build
  image: maven:3.9.4-eclipse-temurin-21
  tags:
    - runner
    - build
    - k8s
  only:
    - develop
  script:
    - cd develop/telegram-bot-service
    - mvn clean package
    - ls -la target
  artifacts:
    paths:
      - develop/telegram-bot-service/target/*.jar
    expire_in: 1 week

build-telegram-bot-service:
  stage: kaniko-build
  image:
    name: gcr.io/kaniko-project/executor:v1.19.0-debug
    entrypoint: [""]  # Убираем стандартный entrypoint
  tags:
    - runner
    - build
    - k8s
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/devops/Dockerfile" --destination "${DOCKER_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:latest"
  artifacts:
    paths:
      - develop/telegram-bot-service/target/*.jar
    expire_in: 1 week

deploy-telegram-bot-service:
  stage: deploy
  image: bitnami/kubectl:latest
  tags:
    - runner
    - build
    - k8s
  only:
    - develop
  script:
    - echo "$KUBECONFIG_CONTENT" > kubeconfig  # Восстанавливаем kubeconfig из CI/CD переменной
    - echo "KUBECONFIG file saved at:"; pwd; echo "/kubeconfig"
    - cat kubeconfig
    - export KUBECONFIG=$(pwd)/kubeconfig  # Устанавливаем kubeconfig для kubectl
    - kubectl apply -f devops/k8s/telegram-bot-service-deployment.yaml --namespace=$KUBERNETES_NAMESPACE

deploy-log:
  stage: deploy
  image: alpine:latest
  tags:
    - k8s
  script:
    - apk add --no-cache curl
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"  # Установка kubectl
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - echo "$KUBECONFIG_CONTENT" > kubeconfig
    - echo "KUBECONFIG file saved at:"; pwd; echo "/kubeconfig"
    - echo "Contents of kubeconfig:"
    - cat kubeconfig
    - export KUBECONFIG=$(pwd)/kubeconfig
    - apk add --no-cache curl bash openssl
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash  # Установка Helm
    - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    - helm repo update
    - helm uninstall prometheus --namespace=$KUBERNETES_NAMESPACE || true
    - helm upgrade --install prometheus prometheus-community/prometheus --namespace $KUBERNETES_NAMESPACE --set prometheus.server.persistentVolume.enabled=false --set rbac.create=false --set kube-state-metrics.enabled=false -f devops/prometheus/values.yaml
    - helm upgrade --install fluent-bit fluent/fluent-bit --namespace $KUBERNETES_NAMESPACE --set rbac.create=false
